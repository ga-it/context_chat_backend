version: '3.9'

# Production-style stack: CCBE + R2R + Hatchet + RabbitMQ + Postgres + LiteLLM
# All paths and credentials are sanitized. Adjust to your environment.

volumes:
  hatchet_certs:
    driver: local
    driver_opts: { type: none, o: bind, device: /data/r2r/hatchetcerts }
  hatchet_config:
    driver: local
    driver_opts: { type: none, o: bind, device: /data/r2r/hatchetconfig }
  hatchet_api_key:
    driver: local
    driver_opts: { type: none, o: bind, device: /data/r2r/hatchetapikey }
  postgres_data:
    driver: local
    driver_opts: { type: none, o: bind, device: /data/r2r/postgresdata }
  hatchet_rabbitmq_data:
    driver: local
    driver_opts: { type: none, o: bind, device: /data/r2r/hatchetrabbitmqdata }
  hatchet_rabbitmq_conf:
    driver: local
    driver_opts: { type: none, o: bind, device: /data/r2r/hatchetrabbitmqconf }
  hatchet_postgres_data:
    driver: local
    driver_opts: { type: none, o: bind, device: /data/r2r/hatchetpostgresdata }
  r2r_user_configs:
    driver: local
    driver_opts: { type: none, o: bind, device: /data/r2r/docker/user_configs }
  r2r_user_tools:
    driver: local
    driver_opts: { type: none, o: bind, device: /data/r2r/docker/user_tools }
  r2r_logs:
    driver: local
    driver_opts: { type: none, o: bind, device: /data/r2r/logs }
  r2r_scripts:
    driver: local
    driver_opts: { type: none, o: bind, device: /data/r2r/scripts }
  ccbe_persistent:
    driver: local
    driver_opts: { type: none, o: bind, device: /data/context_chat_backend/persistent_storage }
  ccbe_logs:
    driver: local
    driver_opts: { type: none, o: bind, device: /data/context_chat_backend/logs }

services:
  litellm-proxy:
    image: ghcr.io/berriai/litellm:latest
    command: ["--port", "8000"]
    environment:
      # Add provider keys here. LiteLLM routes per model prefix (openai/, ollama/, anthropic/, â€¦)
      OPENAI_API_KEY: "sk-<redacted>"
      # MISTRAL_API_KEY: "sk-<redacted>"
      # ANTHROPIC_API_KEY: "sk-ant-<redacted>"
    ports:
      - "8000:8000"        # consider binding to 127.0.0.1 for extra safety

  postgres:
    image: pgvector/pgvector:pg16
    env_file:
      - ./r2r.env
    environment:
      POSTGRES_DB: ${R2R_POSTGRES_DBNAME:-postgres}
      POSTGRES_USER: ${R2R_POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${R2R_POSTGRES_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${R2R_POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  hatchet-postgres:
    image: postgres:16
    env_file:
      - ./r2r.env
    environment:
      POSTGRES_DB: ${HATCHET_POSTGRES_DBNAME:-hatchet}
      POSTGRES_USER: ${HATCHET_POSTGRES_USER:-hatchet_user}
      POSTGRES_PASSWORD: ${HATCHET_POSTGRES_PASSWORD:-hatchet_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - hatchet_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${HATCHET_POSTGRES_USER:-hatchet_user} -d ${HATCHET_POSTGRES_DBNAME:-hatchet}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  hatchet-rabbitmq:
    image: rabbitmq:3-management
    hostname: hatchet-rabbitmq
    env_file:
      - ./r2r.env
    environment:
      RABBITMQ_DEFAULT_USER: "user"
      RABBITMQ_DEFAULT_PASS: "password"
    volumes:
      - hatchet_rabbitmq_data:/var/lib/rabbitmq
      - hatchet_rabbitmq_conf:/etc/rabbitmq
    ports:
      - "5673:5672"      # broker (optional publish to host)
      - "15673:15672"    # mgmt UI (protect in prod)
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: on-failure

  hatchet-create-db:
    image: postgres:16
    env_file:
      - ./r2r.env
    command: >
      sh -c "
        set -e
        until pg_isready -h hatchet-postgres -p 5432 -U ${HATCHET_POSTGRES_USER:-hatchet_user}; do sleep 1; done
        if ! PGPASSWORD=${HATCHET_POSTGRES_PASSWORD:-hatchet_password} psql -h hatchet-postgres -p 5432 -U ${HATCHET_POSTGRES_USER:-hatchet_user} -lqt | grep -qw ${HATCHET_POSTGRES_DBNAME:-hatchet}; then
          PGPASSWORD=${HATCHET_POSTGRES_PASSWORD:-hatchet_password} createdb -h hatchet-postgres -p 5432 -U ${HATCHET_POSTGRES_USER:-hatchet_user} -w ${HATCHET_POSTGRES_DBNAME:-hatchet};
        fi
      "
    depends_on:
      hatchet-postgres:
        condition: service_healthy

  hatchet-migration:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-migrate:v0.53.15
    env_file:
      - ./r2r.env
    environment:
      DATABASE_URL: "postgres://${HATCHET_POSTGRES_USER:-hatchet_user}:${HATCHET_POSTGRES_PASSWORD:-hatchet_password}@hatchet-postgres:5432/${HATCHET_POSTGRES_DBNAME:-hatchet}?sslmode=disable"
    depends_on:
      hatchet-postgres:
        condition: service_healthy
      hatchet-create-db:
        condition: service_completed_successfully

  hatchet-setup-config:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:v0.53.15
    command: /hatchet/hatchet-admin quickstart --skip certs --generated-config-dir /hatchet/config --overwrite=false
    env_file:
      - ./r2r.env
    environment:
      DATABASE_URL: "postgres://${HATCHET_POSTGRES_USER:-hatchet_user}:${HATCHET_POSTGRES_PASSWORD:-hatchet_password}@hatchet-postgres:5432/${HATCHET_POSTGRES_DBNAME:-hatchet}?sslmode=disable"
      HATCHET_CLIENT_GRPC_MAX_RECV_MESSAGE_LENGTH: "${HATCHET_CLIENT_GRPC_MAX_RECV_MESSAGE_LENGTH:-134217728}"
      HATCHET_CLIENT_GRPC_MAX_SEND_MESSAGE_LENGTH: "${HATCHET_CLIENT_GRPC_MAX_SEND_MESSAGE_LENGTH:-134217728}"
      SERVER_TASKQUEUE_RABBITMQ_URL: amqp://user:password@hatchet-rabbitmq:5672/
      SERVER_AUTH_COOKIE_DOMAIN: "http://host.docker.internal:7274"
      SERVER_URL: "http://host.docker.internal:7274"
      SERVER_AUTH_COOKIE_INSECURE: "t"
      SERVER_GRPC_BIND_ADDRESS: "0.0.0.0"
      SERVER_GRPC_INSECURE: "t"
      SERVER_GRPC_BROADCAST_ADDRESS: "hatchet-engine:7077"
      SERVER_GRPC_MAX_MSG_SIZE: 134217728
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    depends_on:
      hatchet-postgres:
        condition: service_healthy
      hatchet-migration:
        condition: service_completed_successfully
      hatchet-rabbitmq:
        condition: service_healthy

  hatchet-engine:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-engine:v0.53.15
    command: /hatchet/hatchet-engine --config /hatchet/config
    env_file:
      - ./r2r.env
    environment:
      DATABASE_URL: "postgres://${HATCHET_POSTGRES_USER:-hatchet_user}:${HATCHET_POSTGRES_PASSWORD:-hatchet_password}@hatchet-postgres:5432/${HATCHET_POSTGRES_DBNAME:-hatchet}?sslmode=disable"
      SERVER_GRPC_BROADCAST_ADDRESS: "hatchet-engine:7077"
      SERVER_GRPC_BIND_ADDRESS: "0.0.0.0"
      SERVER_GRPC_PORT: "7077"
      SERVER_GRPC_INSECURE: "t"
      SERVER_GRPC_MAX_MSG_SIZE: 134217728
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8733/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully
      hatchet-rabbitmq:
        condition: service_healthy
      hatchet-postgres:
        condition: service_healthy
    restart: on-failure

  hatchet-dashboard:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-dashboard:v0.53.15
    command: sh ./entrypoint.sh --config /hatchet/config
    env_file:
      - ./r2r.env
    environment:
      DATABASE_URL: "postgres://${HATCHET_POSTGRES_USER:-hatchet_user}:${HATCHET_POSTGRES_PASSWORD:-hatchet_password}@hatchet-postgres:5432/${HATCHET_POSTGRES_DBNAME:-hatchet}?sslmode=disable"
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
    ports:
      - "7274:80"     # Hatchet dashboard
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully
    restart: on-failure

  setup-token:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:v0.53.15
    env_file:
      - ./r2r.env
    environment:
      HATCHET_TENANT_ID: ${HATCHET_TENANT_ID:-}
      DATABASE_URL: postgres://hatchet_user:hatchet_password@hatchet-postgres:5432/hatchet?sslmode=disable
    command: >
      sh -c "
        until [ -f /hatchet/config/server.yaml ]; do sleep 2; done
        sh /scripts/setup-token.sh
      "
    volumes:
      - hatchet_certs:/hatchet/certs
      - hatchet_config:/hatchet/config
      - hatchet_api_key:/hatchet_api_key
      - r2r_scripts:/scripts
    depends_on:
      hatchet-setup-config:
        condition: service_completed_successfully

  unstructured:
    image: ragtoriches/unst-prod
    env_file:
      - ./r2r.env
    environment:
      UNSTRUCTURED_NUM_WORKERS: ${UNSTRUCTURED_NUM_WORKERS:-12}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7275/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  graph_clustering:
    image: ragtoriches/cluster-prod
    env_file:
      - ./r2r.env
    ports:
      - "7276:7276"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7276/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  r2r:
    image: sciphiai/r2r:latest
    env_file:
      - ./r2r.env
    environment:
      PYTHONUNBUFFERED: "1"
      # If you need to override defaults, add here. Most settings come from TOML.
    command: >
      sh -c '
        until [ -f /hatchet_api_key/api_key.txt ]; do sleep 2; done
        export HATCHET_CLIENT_TOKEN=$$(cat /hatchet_api_key/api_key.txt)
        exec uvicorn core.main.app_entry:app --host $${R2R_HOST} --port $${R2R_PORT}
      '
    volumes:
      - hatchet_api_key:/hatchet_api_key:ro
      - r2r_user_configs:/app/user_configs
      - r2r_user_tools:/app/user_tools
      - r2r_logs:/app/logs
    ports:
      - "7272:7272"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${R2R_PORT:-7272}/v3/health"]
      interval: 6s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
      setup-token:
        condition: service_completed_successfully
      unstructured:
        condition: service_healthy
      graph_clustering:
        condition: service_healthy
    restart: on-failure

  r2r-dashboard:
    image: sciphiai/r2r-dashboard:1.0.3
    env_file:
      - ./r2r.env
    environment:
      NEXT_PUBLIC_R2R_DEPLOYMENT_URL: http://localhost:7272
      NEXT_PUBLIC_HATCHET_DASHBOARD_URL: http://localhost:7274
    ports:
      - "7273:3000"
    restart: on-failure

  ccbe:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ./ccbe.env
    environment:
      # Proactively skip uploads for excluded extensions (mirror ga_r2r.toml zeroed types)
      R2R_EXCLUDE_EXTS: ".tsv,.csv,.xls,.xlsx,.bmp,.heic,.jpeg,.jpg,.png,.tiff"
    volumes:
      - ccbe_persistent:/app/persistent_storage
      - ccbe_logs:/app/logs
    ports:
      - "10034:10034"
    depends_on:
      - r2r
    restart: unless-stopped

